{"ast":null,"code":"var _jsxFileName = \"/home/mb4718/Desktop/sgamble/src/components/CountryInput.tsx\",\n    _s = $RefreshSig$();\n\nimport { t } from \"i18next\";\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { useTranslation } from \"react-i18next\";\nimport { countries, getCountryName, getCityName, sanitizeCountryName } from \"../domain/locs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CountryInput(_ref) {\n  _s();\n\n  let {\n    inputRef,\n    currentGuess,\n    setCurrentGuess\n  } = _ref;\n  const [suggestions, setSuggestions] = useState([]);\n  const {\n    i18n\n  } = useTranslation();\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return setSuggestions(countries.map(c => getCountryName(i18n.resolvedLanguage, c).toUpperCase().concat(getCityName(i18n.resolvedLanguage, c).toUpperCase())).filter(countryName => sanitizeCountryName(countryName).includes(sanitizeCountryName(value))));\n    },\n    onSuggestionsClearRequested: () => setSuggestions([]),\n    getSuggestionValue: suggestion => suggestion //when clicked take the suggestion value\n    ,\n    renderSuggestion: suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border-2 dark:bg-slate-800 dark:text-slate-100\",\n      children: suggestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this),\n    containerProps: {\n      className: \"border-2 flex-auto relative\"\n    },\n    inputProps: {\n      ref: inputRef,\n      className: \"w-full dark:bg-slate-800 dark:text-slate-100\",\n      placeholder: t(\"placeholder\"),\n      value: currentGuess,\n      onChange: (_e, _ref3) => {\n        let {\n          newValue\n        } = _ref3;\n        return setCurrentGuess(newValue);\n      }\n    },\n    renderSuggestionsContainer: _ref4 => {\n      let {\n        containerProps,\n        children\n      } = _ref4;\n      return /*#__PURE__*/_jsxDEV(\"div\", { ...containerProps,\n        className: `${containerProps.className} absolute bottom-full w-full bg-white mb-1 divide-x-2 max-h-52 overflow-auto`,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountryInput, \"q26fu8PzkA7CKsH8H0e4qhBWYhY=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CountryInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryInput\");","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/components/CountryInput.tsx"],"names":["t","React","useState","Autosuggest","useTranslation","countries","getCountryName","getCityName","sanitizeCountryName","CountryInput","inputRef","currentGuess","setCurrentGuess","suggestions","setSuggestions","i18n","value","map","c","resolvedLanguage","toUpperCase","concat","filter","countryName","includes","suggestion","className","ref","placeholder","onChange","_e","newValue","containerProps","children"],"mappings":";;;AAAA,SAASA,CAAT,QAAkB,SAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SACEC,SADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,mBAJF,QAKO,gBALP;;AAaA,OAAO,SAASC,YAAT,OAIe;AAAA;;AAAA,MAJO;AAC3BC,IAAAA,QAD2B;AAE3BC,IAAAA,YAF2B;AAG3BC,IAAAA;AAH2B,GAIP;AACpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAW,EAAX,CAA9C;AAEA,QAAM;AAAEa,IAAAA;AAAF,MAAWX,cAAc,EAA/B;AAEA,sBACE,QAAC,WAAD;AACE,IAAA,WAAW,EAAES,WADf;AAEE,IAAA,2BAA2B,EAAE;AAAA,UAAC;AAAEG,QAAAA;AAAF,OAAD;AAAA,aAC3BF,cAAc,CACZT,SAAS,CACNY,GADH,CACQC,CAAD,IAAOZ,cAAc,CAACS,IAAI,CAACI,gBAAN,EAAwBD,CAAxB,CAAd,CAAyCE,WAAzC,GAAuDC,MAAvD,CAA8Dd,WAAW,CAACQ,IAAI,CAACI,gBAAN,EAAwBD,CAAxB,CAAX,CAAsCE,WAAtC,EAA9D,CADd,EAEGE,MAFH,CAEWC,WAAD,IACNf,mBAAmB,CAACe,WAAD,CAAnB,CAAiCC,QAAjC,CACEhB,mBAAmB,CAACQ,KAAD,CADrB,CAHJ,CADY,CADa;AAAA,KAF/B;AAaE,IAAA,2BAA2B,EAAE,MAAMF,cAAc,CAAC,EAAD,CAbnD;AAcE,IAAA,kBAAkB,EAAGW,UAAD,IAAgBA,UAdtC,CAckD;AAdlD;AAeE,IAAA,gBAAgB,EAAGA,UAAD,iBAChB;AAAK,MAAA,SAAS,EAAC,gDAAf;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAoBE,IAAA,cAAc,EAAE;AACdC,MAAAA,SAAS,EAAE;AADG,KApBlB;AAuBE,IAAA,UAAU,EAAE;AACVC,MAAAA,GAAG,EAAEjB,QADK;AAEVgB,MAAAA,SAAS,EAAE,8CAFD;AAGVE,MAAAA,WAAW,EAAE5B,CAAC,CAAC,aAAD,CAHJ;AAIVgB,MAAAA,KAAK,EAAEL,YAJG;AAKVkB,MAAAA,QAAQ,EAAE,CAACC,EAAD;AAAA,YAAK;AAAEC,UAAAA;AAAF,SAAL;AAAA,eAAsBnB,eAAe,CAACmB,QAAD,CAArC;AAAA;AALA,KAvBd;AA8BE,IAAA,0BAA0B,EAAE;AAAA,UAAC;AAAEC,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB,OAAD;AAAA,0BAC1B,oBACMD,cADN;AAEE,QAAA,SAAS,EAAG,GAAEA,cAAc,CAACN,SAAU,8EAFzC;AAAA,kBAIGO;AAJH;AAAA;AAAA;AAAA;AAAA,cAD0B;AAAA;AA9B9B;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD;;GAlDexB,Y;UAOGL,c;;;KAPHK,Y","sourcesContent":["import { t } from \"i18next\";\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  countries,\n  getCountryName,\n  getCityName,\n  sanitizeCountryName,\n} from \"../domain/locs\";\n\ninterface CountryInputProps {\n  inputRef: React.RefObject<HTMLInputElement>;\n  currentGuess: string;\n  setCurrentGuess: (guess: string) => void;\n}\n\nexport function CountryInput({\n  inputRef,\n  currentGuess,\n  setCurrentGuess,\n}: CountryInputProps) {\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  const { i18n } = useTranslation();\n\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={({ value }) =>\n        setSuggestions(\n          countries\n            .map((c) => getCountryName(i18n.resolvedLanguage, c).toUpperCase().concat(getCityName(i18n.resolvedLanguage, c).toUpperCase()))\n            .filter((countryName) =>\n              sanitizeCountryName(countryName).includes(\n                sanitizeCountryName(value)\n              )\n            )\n        )\n      }\n      onSuggestionsClearRequested={() => setSuggestions([])}\n      getSuggestionValue={(suggestion) => suggestion} //when clicked take the suggestion value\n      renderSuggestion={(suggestion) => (\n        <div className=\"border-2 dark:bg-slate-800 dark:text-slate-100\">\n          {suggestion}\n        </div>\n      )}\n      containerProps={{\n        className: \"border-2 flex-auto relative\",\n      }}\n      inputProps={{\n        ref: inputRef,\n        className: \"w-full dark:bg-slate-800 dark:text-slate-100\",\n        placeholder: t(\"placeholder\"),\n        value: currentGuess,\n        onChange: (_e, { newValue }) => setCurrentGuess(newValue),\n      }}\n      renderSuggestionsContainer={({ containerProps, children }) => (\n        <div\n          {...containerProps}\n          className={`${containerProps.className} absolute bottom-full w-full bg-white mb-1 divide-x-2 max-h-52 overflow-auto`}\n        >\n          {children}\n        </div>\n      )}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}