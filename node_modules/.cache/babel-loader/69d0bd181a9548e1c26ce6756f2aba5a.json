{"ast":null,"code":"import _slicedToArray from\"/home/mb4718/Desktop/sgamble/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{DateTime}from\"luxon\";import React,{useCallback,useEffect,useMemo,useRef,useState}from\"react\";import{toast}from\"react-toastify\";import{countries,getCountryName,sanitizeCountryName}from\"../domain/locs\";import{useGuesses}from\"../hooks/useGuesses\";import{CountryInput}from\"./CountryInput\";import*as geolib from\"geolib\";import{Share}from\"./Share\";import{Guesses}from\"./Guesses\";import{useTranslation}from\"react-i18next\";import{useMode}from\"../hooks/useMode\";import{useCountry}from\"../hooks/useCountry\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function getDayString(){return DateTime.now().toFormat(\"yyyy-MM-dd\");}var MAX_TRY_COUNT=6;export function Game(_ref){var _guesses;var settingsData=_ref.settingsData;var _useTranslation=useTranslation(),t=_useTranslation.t,i18n=_useTranslation.i18n;var dayString=useMemo(getDayString,[]);var countryInputRef=useRef(null);var _useCountry=useCountry(dayString),_useCountry2=_slicedToArray(_useCountry,3),country=_useCountry2[0],randomAngle=_useCountry2[1],imageScale=_useCountry2[2];var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentGuess=_useState2[0],setCurrentGuess=_useState2[1];var _useGuesses=useGuesses(dayString),_useGuesses2=_slicedToArray(_useGuesses,2),guesses=_useGuesses2[0],addGuess=_useGuesses2[1];var _useMode=useMode(\"hideImageMode\",dayString,settingsData.noImageMode),_useMode2=_slicedToArray(_useMode,2),hideImageMode=_useMode2[0],setHideImageMode=_useMode2[1];var _useMode3=useMode(\"rotationMode\",dayString,settingsData.rotationMode),_useMode4=_slicedToArray(_useMode3,2),rotationMode=_useMode4[0],setRotationMode=_useMode4[1];var gameEnded=guesses.length===MAX_TRY_COUNT||((_guesses=guesses[guesses.length-1])===null||_guesses===void 0?void 0:_guesses.distance)===0;// const handleSubmit = useCallback(\n//   (e: React.FormEvent<HTMLFormElement>) => {\n//     e.preventDefault();\n//     const guessedCountry = countries.find(\n//       (country) =>\n//         sanitizeCountryName(\n//           getCountryName(i18n.resolvedLanguage, country)\n//         ) === sanitizeCountryName(currentGuess)\n//     );\nvar handleSubmit=useCallback(function(e){e.preventDefault();var guessedCountry=countries.find(function(country){return sanitizeCountryName(getCountryName(i18n.resolvedLanguage,country))===sanitizeCountryName(currentGuess);});if(guessedCountry==null){toast.error(t(\"Not a location on the list!\"));return;}var newGuess={name:currentGuess,distance:geolib.getDistance(guessedCountry,country),direction:geolib.getCompassDirection(guessedCountry,country)};addGuess(newGuess);setCurrentGuess(\"\");if(newGuess.distance===0){toast.success(t(\"welldone\"),{delay:2000});}},[addGuess,country,currentGuess,i18n.resolvedLanguage,t]);useEffect(function(){if(guesses.length===MAX_TRY_COUNT&&guesses[guesses.length-1].distance>0){toast.info(getCountryName(i18n.resolvedLanguage,country).toUpperCase(),{autoClose:false,delay:2000});}},[country,guesses,i18n.resolvedLanguage]);return/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow flex flex-col mx-2\",children:[hideImageMode&&!gameEnded&&/*#__PURE__*/_jsx(\"button\",{className:\"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",type:\"button\",onClick:function onClick(){return setHideImageMode(false);},children:t(\"showCountry\")}),/*#__PURE__*/_jsx(\"div\",{className:\"my-1\",children:/*#__PURE__*/_jsx(\"img\",{})}),rotationMode&&!hideImageMode&&!gameEnded&&/*#__PURE__*/_jsx(\"button\",{className:\"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",type:\"button\",onClick:function onClick(){return setRotationMode(false);},children:t(\"cancelRotation\")}),/*#__PURE__*/_jsx(Guesses,{rowCount:MAX_TRY_COUNT,guesses:guesses,settingsData:settingsData,countryInputRef:countryInputRef}),/*#__PURE__*/_jsx(\"div\",{className:\"my-2\",children:gameEnded?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Share,{guesses:guesses,dayString:dayString,settingsData:settingsData,hideImageMode:hideImageMode,rotationMode:rotationMode}),/*#__PURE__*/_jsx(\"a\",{className:\"underline w-full text-center block mt-4\",target:\"_blank\",rel:\"noopener noreferrer\",children:t(\"\")})]}):/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(CountryInput,{inputRef:countryInputRef,currentGuess:currentGuess,setCurrentGuess:setCurrentGuess}),/*#__PURE__*/_jsxs(\"button\",{className:\"border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",type:\"submit\",children:[\"\\uD83C\\uDF51 \",t(\"guess\"),\" \\uD83D\\uDC1D\"]})]})})})]});}","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/components/Game.tsx"],"names":["DateTime","React","useCallback","useEffect","useMemo","useRef","useState","toast","countries","getCountryName","sanitizeCountryName","useGuesses","CountryInput","geolib","Share","Guesses","useTranslation","useMode","useCountry","getDayString","now","toFormat","MAX_TRY_COUNT","Game","settingsData","t","i18n","dayString","countryInputRef","country","randomAngle","imageScale","currentGuess","setCurrentGuess","guesses","addGuess","noImageMode","hideImageMode","setHideImageMode","rotationMode","setRotationMode","gameEnded","length","distance","handleSubmit","e","preventDefault","guessedCountry","find","resolvedLanguage","error","newGuess","name","getDistance","direction","getCompassDirection","success","delay","info","toUpperCase","autoClose"],"mappings":"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","sourcesContent":["import { DateTime } from \"luxon\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { toast } from \"react-toastify\";\nimport {\n  countries,\n  getCountryName,\n  sanitizeCountryName,\n} from \"../domain/locs\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { SettingsData } from \"../hooks/useSettings\";\nimport { useMode } from \"../hooks/useMode\";\nimport { useCountry } from \"../hooks/useCountry\";\n\nfunction getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\n\nconst MAX_TRY_COUNT = 6;\n\ninterface GameProps {\n  settingsData: SettingsData;\n}\n\nexport function Game({ settingsData }: GameProps) {\n  const { t, i18n } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n\n  const countryInputRef = useRef<HTMLInputElement>(null);\n\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\n    \"hideImageMode\",\n    dayString,\n    settingsData.noImageMode\n  );\n  const [rotationMode, setRotationMode] = useMode(\n    \"rotationMode\",\n    dayString,\n    settingsData.rotationMode\n  );\n\n  const gameEnded =\n    guesses.length === MAX_TRY_COUNT ||\n    guesses[guesses.length - 1]?.distance === 0;\n\n  // const handleSubmit = useCallback(\n  //   (e: React.FormEvent<HTMLFormElement>) => {\n  //     e.preventDefault();\n  //     const guessedCountry = countries.find(\n  //       (country) =>\n  //         sanitizeCountryName(\n  //           getCountryName(i18n.resolvedLanguage, country)\n  //         ) === sanitizeCountryName(currentGuess)\n  //     );\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const guessedCountry = countries.find(\n        (country) =>\n          sanitizeCountryName(\n            getCountryName(i18n.resolvedLanguage, country)\n          ) === sanitizeCountryName(currentGuess)\n      );\n\n      if (guessedCountry == null) {\n        toast.error(t(\"Not a location on the list!\"));\n        return;\n      }\n\n      const newGuess = {\n        name: currentGuess,\n        distance: geolib.getDistance(guessedCountry, country),\n        direction: geolib.getCompassDirection(guessedCountry, country),\n      };\n\n      addGuess(newGuess);\n      setCurrentGuess(\"\");\n\n      if (newGuess.distance === 0) {\n        toast.success(t(\"welldone\"), { delay: 2000 });\n      }\n    },\n    [addGuess, country, currentGuess, i18n.resolvedLanguage, t]\n  );\n\n  useEffect(() => {\n    if (\n      guesses.length === MAX_TRY_COUNT &&\n      guesses[guesses.length - 1].distance > 0\n    ) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000,\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n\n  return (\n    <div className=\"flex-grow flex flex-col mx-2\">\n      {hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setHideImageMode(false)}\n        >\n          {t(\"showCountry\")}\n        </button>\n      )}\n      <div className=\"my-1\">\n        <img\n          // className={`max-h-52 m-auto transition-transform duration-700 ease-in dark:invert ${\n          //   hideImageMode && !gameEnded ? \"h-0\" : \"h-full\"\n          // }`}\n          // alt=\"country to guess\"\n          // style={\n          //   rotationMode && !gameEnded\n          //     ? {\n          //         transform: `rotate(${randomAngle}deg) scale(${imageScale})`,\n          //       }\n          //     : {}\n          // }\n        />\n      </div>\n      {rotationMode && !hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setRotationMode(false)}\n        >\n          {t(\"cancelRotation\")}\n        </button>\n      )}\n      <Guesses\n        rowCount={MAX_TRY_COUNT}\n        guesses={guesses}\n        settingsData={settingsData}\n        countryInputRef={countryInputRef}\n      />\n      <div className=\"my-2\">\n        {gameEnded ? (\n          <>\n            <Share\n              guesses={guesses}\n              dayString={dayString}\n              settingsData={settingsData}\n              hideImageMode={hideImageMode}\n              rotationMode={rotationMode}\n            />\n            <a\n              className=\"underline w-full text-center block mt-4\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {t(\"\")}\n            </a>\n          </>\n        ) : (\n          <form onSubmit={handleSubmit}>\n            <div className=\"flex flex-col\">\n              <CountryInput\n                inputRef={countryInputRef}\n                currentGuess={currentGuess}\n                setCurrentGuess={setCurrentGuess}\n              />\n              <button\n                className=\"border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n                type=\"submit\"\n              >\n                🍑 {t(\"guess\")} 🐝\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}