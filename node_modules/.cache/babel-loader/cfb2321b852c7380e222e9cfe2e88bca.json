{"ast":null,"code":"export var locations=[\"EMM\",\"NOV\"];export var countries=[{code:\"EMM\",name:\"Emmanuel\",latitude:52.204138,longitude:0.125198},{code:\"NOV\",name:\"Novi\",latitude:52.201998,longitude:0.124688}];export var countriesWithImage=countries.filter(function(c){return countryCodesWithImage.includes(c.code.toLowerCase());});export function getCountryName(language,country){return country.name;}export function sanitizeCountryName(countryName){return countryName.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\").replace(/[- '()]/g,\"\").toLowerCase();}","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/domain/locs.ts"],"names":["locations","countries","code","name","latitude","longitude","countriesWithImage","filter","c","countryCodesWithImage","includes","toLowerCase","getCountryName","language","country","sanitizeCountryName","countryName","normalize","replace"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,SAAS,CAAG,CACzB,KADyB,CAEzB,KAFyB,CAAlB,CAcP,MAAO,IAAMC,CAAAA,SAAoB,CAAG,CACpC,CAACC,IAAI,CAAE,KAAP,CAAcC,IAAI,CAAE,UAApB,CAAgCC,QAAQ,CAAE,SAA1C,CAAqDC,SAAS,CAAE,QAAhE,CADoC,CAEpC,CAACH,IAAI,CAAE,KAAP,CAAcC,IAAI,CAAE,MAApB,CAA4BC,QAAQ,CAAE,SAAtC,CAAiDC,SAAS,CAAE,QAA5D,CAFoC,CAA7B,CAKP,MAAO,IAAMC,CAAAA,kBAAkB,CAAGL,SAAS,CAACM,MAAV,CAAiB,SAACC,CAAD,QACjDC,CAAAA,qBAAqB,CAACC,QAAtB,CAA+BF,CAAC,CAACN,IAAF,CAAOS,WAAP,EAA/B,CADiD,EAAjB,CAA3B,CAIP,MAAO,SAASC,CAAAA,cAAT,CAAwBC,QAAxB,CAA0CC,OAA1C,CAA4D,CACjE,MAAOA,CAAAA,OAAO,CAACX,IAAf,CACD,CAED,MAAO,SAASY,CAAAA,mBAAT,CAA6BC,WAA7B,CAA0D,CAC/D,MAAOA,CAAAA,WAAW,CACfC,SADI,CACM,KADN,EAEJC,OAFI,CAEI,kBAFJ,CAEwB,EAFxB,EAGJA,OAHI,CAGI,UAHJ,CAGgB,EAHhB,EAIJP,WAJI,EAAP,CAKD","sourcesContent":["export const locations = [\n\"EMM\",\n\"NOV\"\n];\n\nexport interface Country {\n  code: string;\n  name: string;\n  latitude: number;\n  longitude: number;\n\n}\n\n\nexport const countries: Country[] = [\n{code: \"EMM\", name: \"Emmanuel\", latitude: 52.204138, longitude: 0.125198},\n{code: \"NOV\", name: \"Novi\", latitude: 52.201998, longitude: 0.124688},\n];\n\nexport const countriesWithImage = countries.filter((c) =>\n  countryCodesWithImage.includes(c.code.toLowerCase())\n);\n\nexport function getCountryName(language: string, country: Country) {\n  return country.name;\n}\n\nexport function sanitizeCountryName(countryName: string): string {\n  return countryName\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/[- '()]/g, \"\")\n    .toLowerCase();\n}\n"]},"metadata":{},"sourceType":"module"}