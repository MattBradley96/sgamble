{"ast":null,"code":"import{useMemo}from\"react\";import seedrandom from\"seedrandom\";import{countriesWithImage}from\"../domain/locs\";var forcedCountries={\"2022-02-02\":\"TD\",\"2022-02-03\":\"PY\"};export function useCountry(dayString){var country=useMemo(function(){var forcedCountryCode=forcedCountries[dayString];var forcedCountry=forcedCountryCode!=null?countriesWithImage.find(function(country){return country.code===forcedCountryCode;}):undefined;return forcedCountry!==null&&forcedCountry!==void 0?forcedCountry:countriesWithImage[Math.floor(seedrandom.alea(dayString)()*countriesWithImage.length)];},[dayString]);var randomAngle=useMemo(function(){return seedrandom.alea(dayString)()*360;},[dayString]);var imageScale=useMemo(function(){var normalizedAngle=45-randomAngle%90;var radianAngle=normalizedAngle*Math.PI/180;return 1/(Math.cos(radianAngle)*Math.sqrt(2));},[randomAngle]);return[country,randomAngle,imageScale];}","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/hooks/useCountry.ts"],"names":["useMemo","seedrandom","countriesWithImage","forcedCountries","useCountry","dayString","country","forcedCountryCode","forcedCountry","find","code","undefined","Math","floor","alea","length","randomAngle","imageScale","normalizedAngle","radianAngle","PI","cos","sqrt"],"mappings":"AAAA,OAASA,OAAT,KAAwB,OAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,kBAAT,KAA4C,gBAA5C,CAEA,GAAMC,CAAAA,eAAuC,CAAG,CAC9C,aAAc,IADgC,CAE9C,aAAc,IAFgC,CAAhD,CAKA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,SAApB,CAAkE,CACvE,GAAMC,CAAAA,OAAO,CAAGN,OAAO,CAAC,UAAM,CAC5B,GAAMO,CAAAA,iBAAiB,CAAGJ,eAAe,CAACE,SAAD,CAAzC,CACA,GAAMG,CAAAA,aAAa,CACjBD,iBAAiB,EAAI,IAArB,CACIL,kBAAkB,CAACO,IAAnB,CACE,SAACH,OAAD,QAAaA,CAAAA,OAAO,CAACI,IAAR,GAAiBH,iBAA9B,EADF,CADJ,CAIII,SALN,CAOA,MACEH,CAAAA,aADF,SACEA,aADF,UACEA,aADF,CAEEN,kBAAkB,CAChBU,IAAI,CAACC,KAAL,CAAWZ,UAAU,CAACa,IAAX,CAAgBT,SAAhB,IAA+BH,kBAAkB,CAACa,MAA7D,CADgB,CAFpB,CAMD,CAfsB,CAepB,CAACV,SAAD,CAfoB,CAAvB,CAiBA,GAAMW,CAAAA,WAAW,CAAGhB,OAAO,CACzB,iBAAMC,CAAAA,UAAU,CAACa,IAAX,CAAgBT,SAAhB,IAA+B,GAArC,EADyB,CAEzB,CAACA,SAAD,CAFyB,CAA3B,CAKA,GAAMY,CAAAA,UAAU,CAAGjB,OAAO,CAAC,UAAM,CAC/B,GAAMkB,CAAAA,eAAe,CAAG,GAAMF,WAAW,CAAG,EAA5C,CACA,GAAMG,CAAAA,WAAW,CAAID,eAAe,CAAGN,IAAI,CAACQ,EAAxB,CAA8B,GAAlD,CACA,MAAO,IAAKR,IAAI,CAACS,GAAL,CAASF,WAAT,EAAwBP,IAAI,CAACU,IAAL,CAAU,CAAV,CAA7B,CAAP,CACD,CAJyB,CAIvB,CAACN,WAAD,CAJuB,CAA1B,CAMA,MAAO,CAACV,OAAD,CAAUU,WAAV,CAAuBC,UAAvB,CAAP,CACD","sourcesContent":["import { useMemo } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport { countriesWithImage, Country } from \"../domain/locs\";\n\nconst forcedCountries: Record<string, string> = {\n  \"2022-02-02\": \"TD\",\n  \"2022-02-03\": \"PY\",\n};\n\nexport function useCountry(dayString: string): [Country, number, number] {\n  const country = useMemo(() => {\n    const forcedCountryCode = forcedCountries[dayString];\n    const forcedCountry =\n      forcedCountryCode != null\n        ? countriesWithImage.find(\n            (country) => country.code === forcedCountryCode\n          )\n        : undefined;\n\n    return (\n      forcedCountry ??\n      countriesWithImage[\n        Math.floor(seedrandom.alea(dayString)() * countriesWithImage.length)\n      ]\n    );\n  }, [dayString]);\n\n  const randomAngle = useMemo(\n    () => seedrandom.alea(dayString)() * 360,\n    [dayString]\n  );\n\n  const imageScale = useMemo(() => {\n    const normalizedAngle = 45 - (randomAngle % 90);\n    const radianAngle = (normalizedAngle * Math.PI) / 180;\n    return 1 / (Math.cos(radianAngle) * Math.sqrt(2));\n  }, [randomAngle]);\n\n  return [country, randomAngle, imageScale];\n}\n"]},"metadata":{},"sourceType":"module"}