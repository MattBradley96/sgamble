{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport { countries } from \"../domain/locs\";\nexport function useCountry(dayString) {\n  _s();\n\n  const country = useMemo(() => {\n    return countries[3]; // return (countries[Math.floor(seedrandom.alea(dayString)() * countries.length)]);\n  }, [dayString]);\n  const randomAngle = useMemo(() => seedrandom.alea(dayString)() * 360, [dayString]);\n  const imageScale = useMemo(() => {\n    const normalizedAngle = 45 - randomAngle % 90;\n    const radianAngle = normalizedAngle * Math.PI / 180;\n    return 1 / (Math.cos(radianAngle) * Math.sqrt(2));\n  }, [randomAngle]);\n  return [country, randomAngle, imageScale];\n}\n\n_s(useCountry, \"6encjHIiGcGMBrJcLKrKjagIKxg=\");","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/hooks/useCountry.ts"],"names":["useMemo","seedrandom","countries","useCountry","dayString","country","randomAngle","alea","imageScale","normalizedAngle","radianAngle","Math","PI","cos","sqrt"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAAmC,gBAAnC;AAEA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAAkE;AAAA;;AACvE,QAAMC,OAAO,GAAGL,OAAO,CAAC,MAAM;AAC5B,WAAQE,SAAS,CAAC,CAAD,CAAjB,CAD4B,CAE5B;AACD,GAHsB,EAGpB,CAACE,SAAD,CAHoB,CAAvB;AAKA,QAAME,WAAW,GAAGN,OAAO,CACzB,MAAMC,UAAU,CAACM,IAAX,CAAgBH,SAAhB,MAA+B,GADZ,EAEzB,CAACA,SAAD,CAFyB,CAA3B;AAKA,QAAMI,UAAU,GAAGR,OAAO,CAAC,MAAM;AAC/B,UAAMS,eAAe,GAAG,KAAMH,WAAW,GAAG,EAA5C;AACA,UAAMI,WAAW,GAAID,eAAe,GAAGE,IAAI,CAACC,EAAxB,GAA8B,GAAlD;AACA,WAAO,KAAKD,IAAI,CAACE,GAAL,CAASH,WAAT,IAAwBC,IAAI,CAACG,IAAL,CAAU,CAAV,CAA7B,CAAP;AACD,GAJyB,EAIvB,CAACR,WAAD,CAJuB,CAA1B;AAMA,SAAO,CAACD,OAAD,EAAUC,WAAV,EAAuBE,UAAvB,CAAP;AACD;;GAlBeL,U","sourcesContent":["import { useMemo } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport { countries, Country } from \"../domain/locs\";\n\nexport function useCountry(dayString: string): [Country, number, number] {\n  const country = useMemo(() => {\n    return (countries[3]);\n    // return (countries[Math.floor(seedrandom.alea(dayString)() * countries.length)]);\n  }, [dayString]);\n\n  const randomAngle = useMemo(\n    () => seedrandom.alea(dayString)() * 360,\n    [dayString]\n  );\n\n  const imageScale = useMemo(() => {\n    const normalizedAngle = 45 - (randomAngle % 90);\n    const radianAngle = (normalizedAngle * Math.PI) / 180;\n    return 1 / (Math.cos(radianAngle) * Math.sqrt(2));\n  }, [randomAngle]);\n\n  return [country, randomAngle, imageScale];\n}\n"]},"metadata":{},"sourceType":"module"}