{"ast":null,"code":"var _jsxFileName = \"/home/mb4718/Desktop/sgamble/src/components/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport { DateTime } from \"luxon\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { countries, getCountryName, sanitizeCountryName } from \"../domain/locs\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMode } from \"../hooks/useMode\";\nimport { useCountry } from \"../hooks/useCountry\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\n\nconst MAX_TRY_COUNT = 6;\nexport function Game(_ref) {\n  _s();\n\n  var _guesses;\n\n  let {\n    settingsData\n  } = _ref;\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n  const countryInputRef = useRef(null);\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\"hideImageMode\", dayString, settingsData.noImageMode);\n  const [rotationMode, setRotationMode] = useMode(\"rotationMode\", dayString, settingsData.rotationMode);\n  const gameEnded = guesses.length === MAX_TRY_COUNT || ((_guesses = guesses[guesses.length - 1]) === null || _guesses === void 0 ? void 0 : _guesses.distance) === 0;\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n    const guessedCountry = countries.find(country => sanitizeCountryName(getCountryName(i18n.resolvedLanguage, country)) === sanitizeCountryName(currentGuess));\n\n    if (guessedCountry == null) {\n      toast.error(t(\"unknownCountry\"));\n      return;\n    }\n\n    const newGuess = {\n      name: currentGuess,\n      distance: geolib.getDistance(guessedCountry, country),\n      direction: geolib.getCompassDirection(guessedCountry, country)\n    };\n    addGuess(newGuess);\n    setCurrentGuess(\"\");\n\n    if (newGuess.distance === 0) {\n      toast.success(t(\"welldone\"), {\n        delay: 2000\n      });\n    }\n  }, [addGuess, country, currentGuess, i18n.resolvedLanguage, t]);\n  useEffect(() => {\n    if (guesses.length === MAX_TRY_COUNT && guesses[guesses.length - 1].distance > 0) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-grow flex flex-col mx-2\",\n    children: [hideImageMode && !gameEnded && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",\n      type: \"button\",\n      onClick: () => setHideImageMode(false),\n      children: t(\"showCountry\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-1\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), rotationMode && !hideImageMode && !gameEnded && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",\n      type: \"button\",\n      onClick: () => setRotationMode(false),\n      children: t(\"cancelRotation\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Guesses, {\n      rowCount: MAX_TRY_COUNT,\n      guesses: guesses,\n      settingsData: settingsData,\n      countryInputRef: countryInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-2\",\n      children: gameEnded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Share, {\n          guesses: guesses,\n          dayString: dayString,\n          settingsData: settingsData,\n          hideImageMode: hideImageMode,\n          rotationMode: rotationMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"underline w-full text-center block mt-4\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: t(\"showOnGoogleMaps\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(CountryInput, {\n            inputRef: countryInputRef,\n            currentGuess: currentGuess,\n            setCurrentGuess: setCurrentGuess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",\n            type: \"submit\",\n            children: [\"\\uD83C\\uDF51 \", t(\"guess\"), \" \\uD83D\\uDC1D\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"o5D121mCbTS8/tLw6iCEHy2WNN8=\", false, function () {\n  return [useTranslation, useCountry, useGuesses, useMode, useMode];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/components/Game.tsx"],"names":["DateTime","React","useCallback","useEffect","useMemo","useRef","useState","toast","countries","getCountryName","sanitizeCountryName","useGuesses","CountryInput","geolib","Share","Guesses","useTranslation","useMode","useCountry","getDayString","now","toFormat","MAX_TRY_COUNT","Game","settingsData","t","i18n","dayString","countryInputRef","country","randomAngle","imageScale","currentGuess","setCurrentGuess","guesses","addGuess","hideImageMode","setHideImageMode","noImageMode","rotationMode","setRotationMode","gameEnded","length","distance","handleSubmit","e","preventDefault","guessedCountry","find","resolvedLanguage","error","newGuess","name","getDistance","direction","getCompassDirection","success","delay","info","toUpperCase","autoClose"],"mappings":"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","sourcesContent":["import { DateTime } from \"luxon\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { toast } from \"react-toastify\";\nimport {\n  countries,\n  getCountryName,\n  sanitizeCountryName,\n} from \"../domain/locs\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { SettingsData } from \"../hooks/useSettings\";\nimport { useMode } from \"../hooks/useMode\";\nimport { useCountry } from \"../hooks/useCountry\";\n\nfunction getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\n\nconst MAX_TRY_COUNT = 6;\n\ninterface GameProps {\n  settingsData: SettingsData;\n}\n\nexport function Game({ settingsData }: GameProps) {\n  const { t, i18n } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n\n  const countryInputRef = useRef<HTMLInputElement>(null);\n\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\n    \"hideImageMode\",\n    dayString,\n    settingsData.noImageMode\n  );\n  const [rotationMode, setRotationMode] = useMode(\n    \"rotationMode\",\n    dayString,\n    settingsData.rotationMode\n  );\n\n  const gameEnded =\n    guesses.length === MAX_TRY_COUNT ||\n    guesses[guesses.length - 1]?.distance === 0;\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const guessedCountry = countries.find(\n        (country) =>\n          sanitizeCountryName(\n            getCountryName(i18n.resolvedLanguage, country)\n          ) === sanitizeCountryName(currentGuess)\n      );\n\n      if (guessedCountry == null) {\n        toast.error(t(\"unknownCountry\"));\n        return;\n      }\n\n      const newGuess = {\n        name: currentGuess,\n        distance: geolib.getDistance(guessedCountry, country),\n        direction: geolib.getCompassDirection(guessedCountry, country),\n      };\n\n      addGuess(newGuess);\n      setCurrentGuess(\"\");\n\n      if (newGuess.distance === 0) {\n        toast.success(t(\"welldone\"), { delay: 2000 });\n      }\n    },\n    [addGuess, country, currentGuess, i18n.resolvedLanguage, t]\n  );\n\n  useEffect(() => {\n    if (\n      guesses.length === MAX_TRY_COUNT &&\n      guesses[guesses.length - 1].distance > 0\n    ) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000,\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n\n  return (\n    <div className=\"flex-grow flex flex-col mx-2\">\n      {hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setHideImageMode(false)}\n        >\n          {t(\"showCountry\")}\n        </button>\n      )}\n      <div className=\"my-1\">\n        <img\n          // className={`max-h-52 m-auto transition-transform duration-700 ease-in dark:invert ${\n          //   hideImageMode && !gameEnded ? \"h-0\" : \"h-full\"\n          // }`}\n          // alt=\"country to guess\"\n          // style={\n          //   rotationMode && !gameEnded\n          //     ? {\n          //         transform: `rotate(${randomAngle}deg) scale(${imageScale})`,\n          //       }\n          //     : {}\n          // }\n        />\n      </div>\n      {rotationMode && !hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setRotationMode(false)}\n        >\n          {t(\"cancelRotation\")}\n        </button>\n      )}\n      <Guesses\n        rowCount={MAX_TRY_COUNT}\n        guesses={guesses}\n        settingsData={settingsData}\n        countryInputRef={countryInputRef}\n      />\n      <div className=\"my-2\">\n        {gameEnded ? (\n          <>\n            <Share\n              guesses={guesses}\n              dayString={dayString}\n              settingsData={settingsData}\n              hideImageMode={hideImageMode}\n              rotationMode={rotationMode}\n            />\n            <a\n              className=\"underline w-full text-center block mt-4\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {t(\"showOnGoogleMaps\")}\n            </a>\n          </>\n        ) : (\n          <form onSubmit={handleSubmit}>\n            <div className=\"flex flex-col\">\n              <CountryInput\n                inputRef={countryInputRef}\n                currentGuess={currentGuess}\n                setCurrentGuess={setCurrentGuess}\n              />\n              <button\n                className=\"border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n                type=\"submit\"\n              >\n                🍑 {t(\"guess\")} 🐝\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}