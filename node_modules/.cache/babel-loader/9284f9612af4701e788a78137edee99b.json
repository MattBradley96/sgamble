{"ast":null,"code":"import _toConsumableArray from\"/home/mb4718/Desktop/sgamble/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/mb4718/Desktop/sgamble/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{DateTime}from\"luxon\";import{loadAllGuesses}from\"./guess\";export function getStatsData(){var allGuesses=loadAllGuesses();var allGuessesEntries=Object.entries(allGuesses);var played=allGuessesEntries.length;var guessDistribution={1:0,2:0,3:0,4:0,5:0,6:0};var currentStreak=0;var maxStreak=0;var previousDate;var bestDistanceSum=0;for(var _i=0,_allGuessesEntries=allGuessesEntries;_i<_allGuessesEntries.length;_i++){var _allGuessesEntries$_i=_slicedToArray(_allGuessesEntries[_i],2),dayString=_allGuessesEntries$_i[0],guesses=_allGuessesEntries$_i[1];bestDistanceSum+=Math.min.apply(Math,_toConsumableArray(guesses.map(function(guess){return guess.distance;})));var currentDate=DateTime.fromFormat(dayString,\"yyyy-MM-dd\");var winIndex=guesses.findIndex(function(guess){return guess.distance===0;});var won=winIndex>=0;if(won){var tryCount=winIndex+1;guessDistribution[tryCount]++;if(previousDate==null||previousDate.plus({days:1}).hasSame(currentDate,\"day\")){currentStreak++;}else{currentStreak=1;}}else{currentStreak=0;}if(currentStreak>maxStreak){maxStreak=currentStreak;}previousDate=currentDate;}var winCount=Object.values(guessDistribution).reduce(function(total,tries){return total+tries;});return{currentStreak:currentStreak,maxStreak:maxStreak,played:played,winRatio:winCount/(played||1),guessDistribution:guessDistribution,averageBestDistance:bestDistanceSum/(played||1)};}","map":{"version":3,"sources":["/home/mb4718/Desktop/sgamble/src/domain/stats.ts"],"names":["DateTime","loadAllGuesses","getStatsData","allGuesses","allGuessesEntries","Object","entries","played","length","guessDistribution","currentStreak","maxStreak","previousDate","bestDistanceSum","dayString","guesses","Math","min","map","guess","distance","currentDate","fromFormat","winIndex","findIndex","won","tryCount","plus","days","hasSame","winCount","values","reduce","total","tries","winRatio","averageBestDistance"],"mappings":"4OAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,cAAT,KAA+B,SAA/B,CAWA,MAAO,SAASC,CAAAA,YAAT,EAAmC,CACxC,GAAMC,CAAAA,UAAU,CAAGF,cAAc,EAAjC,CAEA,GAAMG,CAAAA,iBAAiB,CAAGC,MAAM,CAACC,OAAP,CAAeH,UAAf,CAA1B,CACA,GAAMI,CAAAA,MAAM,CAAGH,iBAAiB,CAACI,MAAjC,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,CACxB,EAAG,CADqB,CAExB,EAAG,CAFqB,CAGxB,EAAG,CAHqB,CAIxB,EAAG,CAJqB,CAKxB,EAAG,CALqB,CAMxB,EAAG,CANqB,CAA1B,CASA,GAAIC,CAAAA,aAAa,CAAG,CAApB,CACA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CACA,GAAIC,CAAAA,YAAJ,CACA,GAAIC,CAAAA,eAAe,CAAG,CAAtB,CACA,gCAAmCT,iBAAnC,mCAAsD,CAAjD,mEAAOU,SAAP,0BAAkBC,OAAlB,0BACHF,eAAe,EAAIG,IAAI,CAACC,GAAL,OAAAD,IAAI,oBAAQD,OAAO,CAACG,GAAR,CAAY,SAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAjB,EAAZ,CAAR,EAAvB,CACA,GAAMC,CAAAA,WAAW,CAAGrB,QAAQ,CAACsB,UAAT,CAAoBR,SAApB,CAA+B,YAA/B,CAApB,CACA,GAAMS,CAAAA,QAAQ,CAAGR,OAAO,CAACS,SAAR,CAAkB,SAACL,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,GAAmB,CAA9B,EAAlB,CAAjB,CACA,GAAMK,CAAAA,GAAG,CAAGF,QAAQ,EAAI,CAAxB,CACA,GAAIE,GAAJ,CAAS,CACP,GAAMC,CAAAA,QAAQ,CAAIH,QAAQ,CAAG,CAA7B,CACAd,iBAAiB,CAACiB,QAAD,CAAjB,GAEA,GACEd,YAAY,EAAI,IAAhB,EACAA,YAAY,CAACe,IAAb,CAAkB,CAAEC,IAAI,CAAE,CAAR,CAAlB,EAA+BC,OAA/B,CAAuCR,WAAvC,CAAoD,KAApD,CAFF,CAGE,CACAX,aAAa,GACd,CALD,IAKO,CACLA,aAAa,CAAG,CAAhB,CACD,CACF,CAZD,IAYO,CACLA,aAAa,CAAG,CAAhB,CACD,CAED,GAAIA,aAAa,CAAGC,SAApB,CAA+B,CAC7BA,SAAS,CAAGD,aAAZ,CACD,CACDE,YAAY,CAAGS,WAAf,CACD,CAED,GAAMS,CAAAA,QAAQ,CAAGzB,MAAM,CAAC0B,MAAP,CAActB,iBAAd,EAAiCuB,MAAjC,CACf,SAACC,KAAD,CAAQC,KAAR,QAAkBD,CAAAA,KAAK,CAAGC,KAA1B,EADe,CAAjB,CAIA,MAAO,CACLxB,aAAa,CAAEA,aADV,CAELC,SAAS,CAAEA,SAFN,CAGLJ,MAAM,CAANA,MAHK,CAIL4B,QAAQ,CAAEL,QAAQ,EAAIvB,MAAM,EAAI,CAAd,CAJb,CAKLE,iBAAiB,CAAEA,iBALd,CAML2B,mBAAmB,CAAEvB,eAAe,EAAIN,MAAM,EAAI,CAAd,CAN/B,CAAP,CAQD","sourcesContent":["import { DateTime } from \"luxon\";\nimport { loadAllGuesses } from \"./guess\";\n\nexport interface StatsData {\n  currentStreak: number;\n  maxStreak: number;\n  played: number;\n  winRatio: number;\n  guessDistribution: Record<1 | 2 | 3 | 4 | 5 | 6, number>;\n  averageBestDistance: number;\n}\n\nexport function getStatsData(): StatsData {\n  const allGuesses = loadAllGuesses();\n\n  const allGuessesEntries = Object.entries(allGuesses);\n  const played = allGuessesEntries.length;\n\n  const guessDistribution = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n  };\n\n  let currentStreak = 0;\n  let maxStreak = 0;\n  let previousDate: DateTime | undefined;\n  let bestDistanceSum = 0;\n  for (const [dayString, guesses] of allGuessesEntries) {\n    bestDistanceSum += Math.min(...guesses.map((guess) => guess.distance));\n    const currentDate = DateTime.fromFormat(dayString, \"yyyy-MM-dd\");\n    const winIndex = guesses.findIndex((guess) => guess.distance === 0);\n    const won = winIndex >= 0;\n    if (won) {\n      const tryCount = (winIndex + 1) as 1 | 2 | 3 | 4 | 5 | 6;\n      guessDistribution[tryCount]++;\n\n      if (\n        previousDate == null ||\n        previousDate.plus({ days: 1 }).hasSame(currentDate, \"day\")\n      ) {\n        currentStreak++;\n      } else {\n        currentStreak = 1;\n      }\n    } else {\n      currentStreak = 0;\n    }\n\n    if (currentStreak > maxStreak) {\n      maxStreak = currentStreak;\n    }\n    previousDate = currentDate;\n  }\n\n  const winCount = Object.values(guessDistribution).reduce(\n    (total, tries) => total + tries\n  );\n\n  return {\n    currentStreak: currentStreak,\n    maxStreak: maxStreak,\n    played,\n    winRatio: winCount / (played || 1),\n    guessDistribution: guessDistribution,\n    averageBestDistance: bestDistanceSum / (played || 1),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}