[{"/home/mb4718/Desktop/sgamble/src/service-worker.ts":"1","/home/mb4718/Desktop/sgamble/src/index.tsx":"2","/home/mb4718/Desktop/sgamble/src/i18n.ts":"3","/home/mb4718/Desktop/sgamble/src/serviceWorkerRegistration.ts":"4","/home/mb4718/Desktop/sgamble/src/reportWebVitals.ts":"5","/home/mb4718/Desktop/sgamble/src/App.tsx":"6","/home/mb4718/Desktop/sgamble/src/hooks/useSettings.ts":"7","/home/mb4718/Desktop/sgamble/src/components/Game.tsx":"8","/home/mb4718/Desktop/sgamble/src/components/InstallButton.tsx":"9","/home/mb4718/Desktop/sgamble/src/components/Worldle.tsx":"10","/home/mb4718/Desktop/sgamble/src/components/panels/Infos.tsx":"11","/home/mb4718/Desktop/sgamble/src/components/panels/InfosFr.tsx":"12","/home/mb4718/Desktop/sgamble/src/components/panels/Settings.tsx":"13","/home/mb4718/Desktop/sgamble/src/components/panels/Stats.tsx":"14","/home/mb4718/Desktop/sgamble/src/hooks/useCountry.ts":"15","/home/mb4718/Desktop/sgamble/src/hooks/useMode.ts":"16","/home/mb4718/Desktop/sgamble/src/hooks/useGuesses.ts":"17","/home/mb4718/Desktop/sgamble/src/components/CountryInput.tsx":"18","/home/mb4718/Desktop/sgamble/src/components/Share.tsx":"19","/home/mb4718/Desktop/sgamble/src/components/Guesses.tsx":"20","/home/mb4718/Desktop/sgamble/src/components/panels/Panel.tsx":"21","/home/mb4718/Desktop/sgamble/src/domain/geography.ts":"22","/home/mb4718/Desktop/sgamble/src/domain/stats.ts":"23","/home/mb4718/Desktop/sgamble/src/domain/locs.ts":"24","/home/mb4718/Desktop/sgamble/src/domain/guess.ts":"25","/home/mb4718/Desktop/sgamble/src/components/GuessRow.tsx":"26"},{"size":2972,"mtime":1645347222000,"results":"27","hashOfConfig":"28"},{"size":962,"mtime":1645347222000,"results":"29","hashOfConfig":"28"},{"size":6646,"mtime":1645491259516,"results":"30","hashOfConfig":"28"},{"size":5284,"mtime":1645347222000,"results":"31","hashOfConfig":"28"},{"size":425,"mtime":1645347222000,"results":"32","hashOfConfig":"28"},{"size":3468,"mtime":1645526438339,"results":"33","hashOfConfig":"28"},{"size":1211,"mtime":1645347222000,"results":"34","hashOfConfig":"28"},{"size":5290,"mtime":1645545870752,"results":"35","hashOfConfig":"28"},{"size":2251,"mtime":1645347222000,"results":"36","hashOfConfig":"28"},{"size":172,"mtime":1645491831916,"results":"37","hashOfConfig":"28"},{"size":4801,"mtime":1645545123794,"results":"38","hashOfConfig":"28"},{"size":4908,"mtime":1645347222000,"results":"39","hashOfConfig":"28"},{"size":1841,"mtime":1645526549018,"results":"40","hashOfConfig":"28"},{"size":2373,"mtime":1645347222000,"results":"41","hashOfConfig":"28"},{"size":740,"mtime":1645546556980,"results":"42","hashOfConfig":"28"},{"size":799,"mtime":1645347222000,"results":"43","hashOfConfig":"28"},{"size":551,"mtime":1645546560331,"results":"44","hashOfConfig":"28"},{"size":2648,"mtime":1645530406022,"results":"45","hashOfConfig":"28"},{"size":2329,"mtime":1645546340549,"results":"46","hashOfConfig":"28"},{"size":779,"mtime":1645347222000,"results":"47","hashOfConfig":"28"},{"size":1189,"mtime":1645347222000,"results":"48","hashOfConfig":"28"},{"size":1715,"mtime":1645545756770,"results":"49","hashOfConfig":"28"},{"size":1789,"mtime":1645347222000,"results":"50","hashOfConfig":"28"},{"size":6769,"mtime":1645545649874,"results":"51","hashOfConfig":"28"},{"size":550,"mtime":1645347222000,"results":"52","hashOfConfig":"28"},{"size":3221,"mtime":1645347222000,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1ctc4tn",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"/home/mb4718/Desktop/sgamble/src/service-worker.ts",[],["110","111"],"/home/mb4718/Desktop/sgamble/src/index.tsx",[],["112","113"],"/home/mb4718/Desktop/sgamble/src/i18n.ts",[],"/home/mb4718/Desktop/sgamble/src/serviceWorkerRegistration.ts",[],"/home/mb4718/Desktop/sgamble/src/reportWebVitals.ts",[],"/home/mb4718/Desktop/sgamble/src/App.tsx",["114","115"],"import { ToastContainer, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Game } from \"./components/Game\";\nimport React, { useEffect, useState } from \"react\";\nimport { Infos } from \"./components/panels/Infos\";\nimport { useTranslation } from \"react-i18next\";\nimport { InfosFr } from \"./components/panels/InfosFr\";\nimport { Settings } from \"./components/panels/Settings\";\nimport { useSettings } from \"./hooks/useSettings\";\nimport { Worldle } from \"./components/Worldle\";\nimport { Stats } from \"./components/panels/Stats\";\nimport { useReactPWAInstall } from \"@teuteuf/react-pwa-install\";\nimport { InstallButton } from \"./components/InstallButton\";\n\nfunction App() {\n  const { t, i18n } = useTranslation();\n\n  const { pwaInstall, supported, isInstalled } = useReactPWAInstall();\n\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [statsOpen, setStatsOpen] = useState(false);\n\n  const [settingsData, updateSettings] = useSettings();\n\n  useEffect(() => {\n    if (settingsData.theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [settingsData.theme]);\n\n  return (\n    <>\n      <ToastContainer\n        hideProgressBar\n        position=\"top-center\"\n        transition={Flip}\n        theme={settingsData.theme}\n        autoClose={2000}\n        bodyClassName=\"font-bold text-center\"\n      />\n      {i18n.resolvedLanguage === \"fr\" ? (\n        <InfosFr\n          isOpen={infoOpen}\n          close={() => setInfoOpen(false)}\n          settingsData={settingsData}\n        />\n      ) : (\n        <Infos\n          isOpen={infoOpen}\n          close={() => setInfoOpen(false)}\n          settingsData={settingsData}\n        />\n      )}\n      <Settings\n        isOpen={settingsOpen}\n        close={() => setSettingsOpen(false)}\n        settingsData={settingsData}\n        updateSettings={updateSettings}\n      />\n      <Stats\n        isOpen={statsOpen}\n        close={() => setStatsOpen(false)}\n        distanceUnit={settingsData.distanceUnit}\n      />\n      <div className=\"flex justify-center flex-auto dark:bg-slate-900 dark:text-slate-50\">\n        <div className=\"w-full max-w-lg flex flex-col\">\n          <header className=\"border-b-2 px-3 border-gray-200 flex\">\n            <button\n              className=\"mr-3 text-xl\"\n              type=\"button\"\n              onClick={() => setInfoOpen(true)}\n            >\n              ❔\n            </button>\n            {supported() && !isInstalled() && (\n              <InstallButton pwaInstall={pwaInstall} />\n            )}\n            <h1 className=\"text-4xl font-bold uppercase tracking-wide text-center my-1 flex-auto\">\n              Sgamb<span className=\"text-blue-950\">le</span>\n            </h1>\n            <button\n              className=\"ml-3 text-xl\"\n              type=\"button\"\n              onClick={() => setStatsOpen(true)}\n            >\n              📈\n            </button>\n            <button\n              className=\"ml-3 text-xl\"\n              type=\"button\"\n              onClick={() => setSettingsOpen(true)}\n            >\n              ⚙️\n            </button>\n          </header>\n          <Game settingsData={settingsData} />\n          <footer className=\"flex justify-center text-sm mt-8 mb-1\">\n            ❤️\n          </footer>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/mb4718/Desktop/sgamble/src/hooks/useSettings.ts",[],"/home/mb4718/Desktop/sgamble/src/components/Game.tsx",["116","117","118","119"],"import { DateTime } from \"luxon\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { toast } from \"react-toastify\";\nimport {\n  countries,\n  getCountryName,\n  sanitizeCountryName,\n} from \"../domain/locs\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { SettingsData } from \"../hooks/useSettings\";\nimport { useMode } from \"../hooks/useMode\";\nimport { useCountry } from \"../hooks/useCountry\";\n\nfunction getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\n\nconst MAX_TRY_COUNT = 6;\n\ninterface GameProps {\n  settingsData: SettingsData;\n}\n\nexport function Game({ settingsData }: GameProps) {\n  const { t, i18n } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n\n  const countryInputRef = useRef<HTMLInputElement>(null);\n\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\n    \"hideImageMode\",\n    dayString,\n    settingsData.noImageMode\n  );\n  const [rotationMode, setRotationMode] = useMode(\n    \"rotationMode\",\n    dayString,\n    settingsData.rotationMode\n  );\n\n  const gameEnded =\n    guesses.length === MAX_TRY_COUNT ||\n    guesses[guesses.length - 1]?.distance === 0;\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const guessedCountry = countries.find(\n        (country) =>\n          sanitizeCountryName(\n            getCountryName(i18n.resolvedLanguage, country)\n          ) === sanitizeCountryName(currentGuess)\n      );\n\n      if (guessedCountry == null) {\n        toast.error(t(\"Not a location on the list!\"));\n        return;\n      }\n\n      const newGuess = {\n        name: currentGuess,\n        distance: geolib.getDistance(guessedCountry, country),\n        direction: geolib.getCompassDirection(guessedCountry, country),\n      };\n\n      addGuess(newGuess);\n      setCurrentGuess(\"\");\n\n      if (newGuess.distance === 0) {\n        toast.success(t(\"welldone\"), { delay: 2000 });\n      }\n    },\n    [addGuess, country, currentGuess, i18n.resolvedLanguage, t]\n  );\n\n  useEffect(() => {\n    if (\n      guesses.length === MAX_TRY_COUNT &&\n      guesses[guesses.length - 1].distance > 0\n    ) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000,\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n\n  return (\n    <div className=\"flex-grow flex flex-col mx-2\">\n      {hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setHideImageMode(false)}\n        >\n          {t(\"showCountry\")}\n        </button>\n      )}\n      <div className=\"my-1\">\n        <img\n          // className={`max-h-52 m-auto transition-transform duration-700 ease-in dark:invert ${\n          //   hideImageMode && !gameEnded ? \"h-0\" : \"h-full\"\n          // }`}\n          // alt=\"country to guess\"\n          // style={\n          //   rotationMode && !gameEnded\n          //     ? {\n          //         transform: `rotate(${randomAngle}deg) scale(${imageScale})`,\n          //       }\n          //     : {}\n          // }\n        />\n      </div>\n      {rotationMode && !hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setRotationMode(false)}\n        >\n          {t(\"cancelRotation\")}\n        </button>\n      )}\n      <Guesses\n        rowCount={MAX_TRY_COUNT}\n        guesses={guesses}\n        settingsData={settingsData}\n        countryInputRef={countryInputRef}\n      />\n      <div className=\"my-2\">\n        {gameEnded ? (\n          <>\n            <Share\n              guesses={guesses}\n              dayString={dayString}\n              settingsData={settingsData}\n              hideImageMode={hideImageMode}\n              rotationMode={rotationMode}\n            />\n            <a\n              className=\"underline w-full text-center block mt-4\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {t(\"showOnGoogleMaps\")}\n            </a>\n          </>\n        ) : (\n          <form onSubmit={handleSubmit}>\n            <div className=\"flex flex-col\">\n              <CountryInput\n                inputRef={countryInputRef}\n                currentGuess={currentGuess}\n                setCurrentGuess={setCurrentGuess}\n              />\n              <button\n                className=\"border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n                type=\"submit\"\n              >\n                🍑 {t(\"guess\")} 🐝\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/mb4718/Desktop/sgamble/src/components/InstallButton.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/Worldle.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Infos.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/InfosFr.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Settings.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Stats.tsx",[],"/home/mb4718/Desktop/sgamble/src/hooks/useCountry.ts",[],"/home/mb4718/Desktop/sgamble/src/hooks/useMode.ts",[],"/home/mb4718/Desktop/sgamble/src/hooks/useGuesses.ts",[],"/home/mb4718/Desktop/sgamble/src/components/CountryInput.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/Share.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/Guesses.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Panel.tsx",[],"/home/mb4718/Desktop/sgamble/src/domain/geography.ts",[],"/home/mb4718/Desktop/sgamble/src/domain/stats.ts",[],"/home/mb4718/Desktop/sgamble/src/domain/locs.ts",[],"/home/mb4718/Desktop/sgamble/src/domain/guess.ts",[],"/home/mb4718/Desktop/sgamble/src/components/GuessRow.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"122","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":10,"column":10,"nodeType":"128","messageId":"129","endLine":10,"endColumn":17},{"ruleId":"126","severity":1,"message":"130","line":16,"column":11,"nodeType":"128","messageId":"129","endLine":16,"endColumn":12},{"ruleId":"126","severity":1,"message":"131","line":41,"column":19,"nodeType":"128","messageId":"129","endLine":41,"endColumn":30},{"ruleId":"126","severity":1,"message":"132","line":41,"column":32,"nodeType":"128","messageId":"129","endLine":41,"endColumn":42},{"ruleId":"133","severity":1,"message":"134","line":115,"column":9,"nodeType":"135","endLine":127,"endColumn":11},{"ruleId":"136","severity":1,"message":"137","line":154,"column":13,"nodeType":"135","endLine":158,"endColumn":14},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],["138"],["139"],"@typescript-eslint/no-unused-vars","'Worldle' is defined but never used.","Identifier","unusedVar","'t' is assigned a value but never used.","'randomAngle' is assigned a value but never used.","'imageScale' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]