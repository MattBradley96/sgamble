[{"/home/mb4718/Desktop/sgamble/src/service-worker.ts":"1","/home/mb4718/Desktop/sgamble/src/index.tsx":"2","/home/mb4718/Desktop/sgamble/src/i18n.ts":"3","/home/mb4718/Desktop/sgamble/src/serviceWorkerRegistration.ts":"4","/home/mb4718/Desktop/sgamble/src/reportWebVitals.ts":"5","/home/mb4718/Desktop/sgamble/src/App.tsx":"6","/home/mb4718/Desktop/sgamble/src/hooks/useSettings.ts":"7","/home/mb4718/Desktop/sgamble/src/components/Game.tsx":"8","/home/mb4718/Desktop/sgamble/src/components/InstallButton.tsx":"9","/home/mb4718/Desktop/sgamble/src/components/Worldle.tsx":"10","/home/mb4718/Desktop/sgamble/src/components/panels/Infos.tsx":"11","/home/mb4718/Desktop/sgamble/src/components/panels/InfosFr.tsx":"12","/home/mb4718/Desktop/sgamble/src/components/panels/Settings.tsx":"13","/home/mb4718/Desktop/sgamble/src/components/panels/Stats.tsx":"14","/home/mb4718/Desktop/sgamble/src/hooks/useCountry.ts":"15","/home/mb4718/Desktop/sgamble/src/hooks/useMode.ts":"16","/home/mb4718/Desktop/sgamble/src/hooks/useGuesses.ts":"17","/home/mb4718/Desktop/sgamble/src/components/CountryInput.tsx":"18","/home/mb4718/Desktop/sgamble/src/components/Share.tsx":"19","/home/mb4718/Desktop/sgamble/src/components/Guesses.tsx":"20","/home/mb4718/Desktop/sgamble/src/components/panels/Panel.tsx":"21","/home/mb4718/Desktop/sgamble/src/domain/geography.ts":"22","/home/mb4718/Desktop/sgamble/src/domain/stats.ts":"23","/home/mb4718/Desktop/sgamble/src/domain/locs.ts":"24","/home/mb4718/Desktop/sgamble/src/domain/guess.ts":"25","/home/mb4718/Desktop/sgamble/src/components/GuessRow.tsx":"26","/home/mb4718/Desktop/sgamble/src/components/panels/Card.tsx":"27"},{"size":2972,"mtime":1645347222000,"results":"28","hashOfConfig":"29"},{"size":962,"mtime":1645347222000,"results":"30","hashOfConfig":"29"},{"size":6643,"mtime":1645559622898,"results":"31","hashOfConfig":"29"},{"size":5284,"mtime":1645347222000,"results":"32","hashOfConfig":"29"},{"size":425,"mtime":1645347222000,"results":"33","hashOfConfig":"29"},{"size":3846,"mtime":1645556056752,"results":"34","hashOfConfig":"29"},{"size":1211,"mtime":1645347222000,"results":"35","hashOfConfig":"29"},{"size":5626,"mtime":1645559810425,"results":"36","hashOfConfig":"29"},{"size":942,"mtime":1645546917171,"results":"37","hashOfConfig":"29"},{"size":172,"mtime":1645491831916,"results":"38","hashOfConfig":"29"},{"size":5378,"mtime":1645560495981,"results":"39","hashOfConfig":"29"},{"size":4908,"mtime":1645347222000,"results":"40","hashOfConfig":"29"},{"size":1841,"mtime":1645526549018,"results":"41","hashOfConfig":"29"},{"size":2373,"mtime":1645347222000,"results":"42","hashOfConfig":"29"},{"size":740,"mtime":1645546556980,"results":"43","hashOfConfig":"29"},{"size":799,"mtime":1645347222000,"results":"44","hashOfConfig":"29"},{"size":551,"mtime":1645546560331,"results":"45","hashOfConfig":"29"},{"size":2247,"mtime":1645548721413,"results":"46","hashOfConfig":"29"},{"size":2328,"mtime":1645546781289,"results":"47","hashOfConfig":"29"},{"size":779,"mtime":1645347222000,"results":"48","hashOfConfig":"29"},{"size":1189,"mtime":1645347222000,"results":"49","hashOfConfig":"29"},{"size":1796,"mtime":1645560472074,"results":"50","hashOfConfig":"29"},{"size":1789,"mtime":1645347222000,"results":"51","hashOfConfig":"29"},{"size":6769,"mtime":1645545649874,"results":"52","hashOfConfig":"29"},{"size":550,"mtime":1645347222000,"results":"53","hashOfConfig":"29"},{"size":3221,"mtime":1645347222000,"results":"54","hashOfConfig":"29"},{"size":1277,"mtime":1645559501099,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1ctc4tn",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},"/home/mb4718/Desktop/sgamble/src/service-worker.ts",[],["118","119"],"/home/mb4718/Desktop/sgamble/src/index.tsx",[],["120","121"],"/home/mb4718/Desktop/sgamble/src/i18n.ts",[],"/home/mb4718/Desktop/sgamble/src/serviceWorkerRegistration.ts",[],"/home/mb4718/Desktop/sgamble/src/reportWebVitals.ts",[],"/home/mb4718/Desktop/sgamble/src/App.tsx",["122","123"],"import { ToastContainer, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Game } from \"./components/Game\";\nimport React, { useEffect, useState } from \"react\";\nimport { Infos } from \"./components/panels/Infos\";\nimport { Card } from \"./components/panels/Card\";\nimport { useTranslation } from \"react-i18next\";\nimport { InfosFr } from \"./components/panels/InfosFr\";\nimport { Settings } from \"./components/panels/Settings\";\nimport { useSettings } from \"./hooks/useSettings\";\nimport { Worldle } from \"./components/Worldle\";\nimport { Stats } from \"./components/panels/Stats\";\nimport { useReactPWAInstall } from \"@teuteuf/react-pwa-install\";\nimport { InstallButton } from \"./components/InstallButton\";\n\nfunction App() {\n  const { t, i18n } = useTranslation();\n\n  const { pwaInstall, supported, isInstalled } = useReactPWAInstall();\n\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [cardOpen, setCardOpen] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [statsOpen, setStatsOpen] = useState(false);\n\n  const [settingsData, updateSettings] = useSettings();\n\n  useEffect(() => {\n    if (settingsData.theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [settingsData.theme]);\n\n  return (\n    <>\n      <ToastContainer\n        hideProgressBar\n        position=\"top-center\"\n        transition={Flip}\n        theme={settingsData.theme}\n        autoClose={2000}\n        bodyClassName=\"font-bold text-center\"\n      />\n      {i18n.resolvedLanguage === \"fr\" ? (\n        <InfosFr\n          isOpen={infoOpen}\n          close={() => setInfoOpen(false)}\n          settingsData={settingsData}\n        />\n      ) : (\n        <Infos\n          isOpen={infoOpen}\n          close={() => setInfoOpen(false)}\n          settingsData={settingsData}\n        />\n      )}\n      <Card\n        isOpen={cardOpen}\n        close={() => setCardOpen(false)}\n      />\n      <Settings\n        isOpen={settingsOpen}\n        close={() => setSettingsOpen(false)}\n        settingsData={settingsData}\n        updateSettings={updateSettings}\n      />\n      <Stats\n        isOpen={statsOpen}\n        close={() => setStatsOpen(false)}\n        distanceUnit={settingsData.distanceUnit}\n      />\n      <div className=\"flex justify-center flex-auto dark:bg-slate-900 dark:text-slate-50\">\n        <div className=\"w-full max-w-lg flex flex-col\">\n          <header className=\"border-b-2 px-3 border-gray-200 flex\">\n            <button\n              className=\"mr-3 text-xl\"\n              type=\"button\"\n              onClick={() => setInfoOpen(true)}\n            >\n              ❔\n            </button>\n            <button\n              className=\"mr-3 text-xl\"\n              type=\"button\"\n              onClick={() => setCardOpen(true)}\n            >\n              💌\n            </button>\n            {supported() && !isInstalled() && (\n              <InstallButton pwaInstall={pwaInstall} />\n            )}\n            <h1 className=\"text-4xl font-bold uppercase tracking-wide text-center my-1 flex-auto\">\n              Sgamb<span className=\"text-blue-950\">le</span>\n            </h1>\n            <button\n              className=\"ml-3 text-xl\"\n              type=\"button\"\n              onClick={() => setStatsOpen(true)}\n            >\n              📈\n            </button>\n            <button\n              className=\"ml-3 text-xl\"\n              type=\"button\"\n              onClick={() => setSettingsOpen(true)}\n            >\n              ⚙️\n            </button>\n          </header>\n          <Game settingsData={settingsData} />\n          <footer className=\"flex justify-center text-sm mt-8 mb-1\">\n            ❤️\n          </footer>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/mb4718/Desktop/sgamble/src/hooks/useSettings.ts",[],"/home/mb4718/Desktop/sgamble/src/components/Game.tsx",["124","125","126","127"],"import { DateTime } from \"luxon\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { toast } from \"react-toastify\";\nimport {\n  countries,\n  getCountryName,\n  sanitizeCountryName,\n} from \"../domain/locs\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { SettingsData } from \"../hooks/useSettings\";\nimport { useMode } from \"../hooks/useMode\";\nimport { useCountry } from \"../hooks/useCountry\";\n\nfunction getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\n\nconst MAX_TRY_COUNT = 6;\n\ninterface GameProps {\n  settingsData: SettingsData;\n}\n\nexport function Game({ settingsData }: GameProps) {\n  const { t, i18n } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n\n  const countryInputRef = useRef<HTMLInputElement>(null);\n\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\n    \"hideImageMode\",\n    dayString,\n    settingsData.noImageMode\n  );\n  const [rotationMode, setRotationMode] = useMode(\n    \"rotationMode\",\n    dayString,\n    settingsData.rotationMode\n  );\n\n  const gameEnded =\n    guesses.length === MAX_TRY_COUNT ||\n    guesses[guesses.length - 1]?.distance === 0;\n\n  // const handleSubmit = useCallback(\n  //   (e: React.FormEvent<HTMLFormElement>) => {\n  //     e.preventDefault();\n  //     const guessedCountry = countries.find(\n  //       (country) =>\n  //         sanitizeCountryName(\n  //           getCountryName(i18n.resolvedLanguage, country)\n  //         ) === sanitizeCountryName(currentGuess)\n  //     );\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const guessedCountry = countries.find(\n        (country) =>\n          sanitizeCountryName(\n            getCountryName(i18n.resolvedLanguage, country)\n          ) === sanitizeCountryName(currentGuess)\n      );\n\n      if (guessedCountry == null) {\n        toast.error(t(\"Not a location on the list!\"));\n        return;\n      }\n\n      const newGuess = {\n        name: currentGuess,\n        distance: geolib.getDistance(guessedCountry, country),\n        direction: geolib.getCompassDirection(guessedCountry, country),\n      };\n\n      addGuess(newGuess);\n      setCurrentGuess(\"\");\n\n      if (newGuess.distance === 0) {\n        toast.success(t(\"welldone\"), { delay: 2000 });\n      }\n    },\n    [addGuess, country, currentGuess, i18n.resolvedLanguage, t]\n  );\n\n  useEffect(() => {\n    if (\n      guesses.length === MAX_TRY_COUNT &&\n      guesses[guesses.length - 1].distance > 0\n    ) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000,\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n\n  return (\n    <div className=\"flex-grow flex flex-col mx-2\">\n      {hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setHideImageMode(false)}\n        >\n          {t(\"showCountry\")}\n        </button>\n      )}\n      <div className=\"my-1\">\n        <img\n          // className={`max-h-52 m-auto transition-transform duration-700 ease-in dark:invert ${\n          //   hideImageMode && !gameEnded ? \"h-0\" : \"h-full\"\n          // }`}\n          // alt=\"country to guess\"\n          // style={\n          //   rotationMode && !gameEnded\n          //     ? {\n          //         transform: `rotate(${randomAngle}deg) scale(${imageScale})`,\n          //       }\n          //     : {}\n          // }\n        />\n      </div>\n      {rotationMode && !hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setRotationMode(false)}\n        >\n          {t(\"cancelRotation\")}\n        </button>\n      )}\n      <Guesses\n        rowCount={MAX_TRY_COUNT}\n        guesses={guesses}\n        settingsData={settingsData}\n        countryInputRef={countryInputRef}\n      />\n      <div className=\"my-2\">\n        {gameEnded ? (\n          <>\n            <Share\n              guesses={guesses}\n              dayString={dayString}\n              settingsData={settingsData}\n              hideImageMode={hideImageMode}\n              rotationMode={rotationMode}\n            />\n            <a\n              className=\"underline w-full text-center block mt-4\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {t(\"\")}\n            </a>\n          </>\n        ) : (\n          <form onSubmit={handleSubmit}>\n            <div className=\"flex flex-col\">\n              <CountryInput\n                inputRef={countryInputRef}\n                currentGuess={currentGuess}\n                setCurrentGuess={setCurrentGuess}\n              />\n              <button\n                className=\"border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n                type=\"submit\"\n              >\n                🍑 {t(\"guess\")} 🐝\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/mb4718/Desktop/sgamble/src/components/InstallButton.tsx",["128"],"import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface InstallButtonProps {\n  pwaInstall: (options: {\n    title?: string;\n    logo?: string;\n    features?: React.ReactNode;\n    featuresTitle?: string;\n    description?: string;\n    descritpionTitle?: string;\n    instructionTitle?: string;\n    instructionActionOk?: string;\n    instructionActionCancel?: string;\n    instructionActionInstall?: string;\n    instructionIdeviceAction1?: string;\n    instructionIdeviceAction2?: string;\n    instructionFirefoxAction1?: string;\n    instructionFirefoxAction2?: string;\n    instructionFirefoxNewAction1?: string;\n    instructionFirefoxNewAction2?: string;\n    instructionOperaAction1?: string;\n    instructionOperaAction2?: string;\n    instructionNotSupported?: string;\n  }) => Promise<void>;\n}\n\nexport function InstallButton({ pwaInstall }: InstallButtonProps) {\n  const { t } = useTranslation();\n\n  return (null\n  );\n}\n","/home/mb4718/Desktop/sgamble/src/components/Worldle.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Infos.tsx",["129"],"import { Guesses } from \"../Guesses\";\nimport { Panel } from \"./Panel\";\nimport React from \"react\";\nimport { Worldle } from \"../Worldle\";\nimport { formatDistance } from \"../../domain/geography\";\nimport { SettingsData } from \"../../hooks/useSettings\";\n\ninterface InfosProps {\n  isOpen: boolean;\n  close: () => void;\n  settingsData: SettingsData;\n}\n\nexport function Infos({ isOpen, close, settingsData }: InfosProps) {\n  return (\n    <Panel title=\"How to play\" isOpen={isOpen} close={close}>\n      <div className=\"space-y-3 text-justify border-b-2 border-gray-200 pb-3 mb-3\">\n        <div>\n          Guess the <Worldle /> in 6 guesses.\n        </div>\n        <div>Each guess must be a place we've visited together. </div>\n        <div>\n          After each guess, you will be given the distance, direction and\n          proximity from your guess and the target location.\n          If the distance is less than 10km it will be shown in metres.\n        </div>\n      </div>\n      <div className=\"space-y-3 text-justify border-b-2 border-gray-200 pb-3 mb-3\">\n        <div className=\"font-bold\">Examples</div>\n        <div>\n          <Guesses\n            rowCount={1}\n            guesses={[\n              {\n                name: \"Cambridge\",\n                direction: \"SE\",\n                distance: 1_022_000,\n              },\n            ]}\n            settingsData={settingsData}\n          />\n          <div className=\"my-2\">\n            Your guess <span className=\"uppercase font-bold\">Cambridge</span> is{\" \"}\n            {formatDistance(1022000, settingsData.distanceUnit)} away from the\n            target location. The target is in the South-West direction\n            and you have a only 49% of proximity because it&apos;s quite far\n            away!\n          </div>\n        </div>\n        <div>\n          <Guesses\n            rowCount={1}\n            guesses={[\n              {\n                name: \"Lake Iseo\",\n                direction: \"SW\",\n                distance: 2_653,\n              },\n            ]}\n            settingsData={settingsData}\n          />\n          <div className=\"my-2\">\n            Your second guess{\" \"}\n            <span className=\"uppercase font-bold\">Lake Iseo</span> is getting\n            closer! {formatDistance(2653, settingsData.distanceUnit)} away in the\n            South-East direction. Proximity is 99% so you must be very close!\n          </div>\n        </div>\n        <div>\n          <Guesses\n            rowCount={1}\n            guesses={[\n              {\n                name: \"Tavernola Bergamasca\",\n                direction: \"N\",\n                distance: 0,\n              },\n            ]}\n            settingsData={settingsData}\n          />\n          <div className=\"my-2\">\n            Next guess, <span className=\"uppercase font-bold\">Tavernola Bergamasca</span>,\n            is the right location to guess! Congrats! 🎉\n          </div>\n        </div>\n      </div>\n      <div className=\"space-y-3 text-justify border-b-2 border-gray-200 pb-3 mb-3 font-bold\">\n        A new <Worldle /> will be available every day!\n      </div>\n      <div className=\"space-y-3 text-justify border-b-2 border-gray-200 pb-3 mb-3\">\n        <div className=\"font-bold\">About locations</div>\n        <div>\n          For some cities there will be many locations within it. To make things easier you can search by city. So for example if you start typing <span className=\"uppercase font-bold\">London</span>,\n          the suggestions will contain <span className=\"uppercase font-bold\">122 Dalyell Road</span> and <span className=\"uppercase font-bold\">47 Corrance Road</span> etc.\n        </div>\n        <div>\n          The city itself may also be a potential guess, in these cases the centre of the city according to google maps is used. Distances are then taken relative to this.\n          For example <span className=\"uppercase font-bold\">Medwards</span> is {formatDistance(1_186, settingsData.distanceUnit)} NW of <span className=\"uppercase font-bold\">Cambridge</span>.\n        </div>\n        <div>\n         I have tried to keep places guessable and so have included some of the most memorable spots. I'm bound to have missed some, so if your guess isn't accepted but you think it should be included tell me and I will add - it might then be the correct answer in the future!\n        </div>\n      </div>\n      <div className=\"space-y-3 text-justify pb-3\">\n        <div>\n          Made by Matt Bradley\n        </div>\n        <div>\n        Want to support?{\" \"}\n        <a\n          className=\"underline\"\n          href=\"https://monzo.me/matthewbradley/1.00?d=Thanks%20for%20being%20such%20a%20great%20guy\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Monzo me a quid.\n        </a>\n        </div>\n      </div>\n    </Panel>\n  );\n}\n\n\n// <div className=\"space-y-3 text-justify border-b-2 border-gray-200 pb-3 mb-3\">\n//   <Worldle /> has been <span className=\"font-bold\">heavily</span> inspired\n//   by{\" \"}\n//   <a\n//     className=\"underline\"\n//     href=\"https://www.powerlanguage.co.uk/wordle/\"\n//     target=\"_blank\"\n//     rel=\"noopener noreferrer\"\n//   >\n//     Worldle\n//   </a>{\" \"}\n//   created by{\" \"}\n//   <a\n//     className=\"underline\"\n//     href=\"https://twitter.com/powerlanguish\"\n//     target=\"_blank\"\n//     rel=\"noopener noreferrer\"\n//   >\n//     Josh Wardle (@powerlanguish)\n//   </a>\n//   .\n// </div>\n","/home/mb4718/Desktop/sgamble/src/components/panels/InfosFr.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Settings.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Stats.tsx",[],"/home/mb4718/Desktop/sgamble/src/hooks/useCountry.ts",[],"/home/mb4718/Desktop/sgamble/src/hooks/useMode.ts",[],"/home/mb4718/Desktop/sgamble/src/hooks/useGuesses.ts",[],"/home/mb4718/Desktop/sgamble/src/components/CountryInput.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/Share.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/Guesses.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Panel.tsx",[],"/home/mb4718/Desktop/sgamble/src/domain/geography.ts",["130"],"import { Guess } from \"./guess\";\n\nconst MAX_DISTANCE_ON_EARTH = 2_000_000;\n\nexport type Direction =\n  | \"S\"\n  | \"W\"\n  | \"NNE\"\n  | \"NE\"\n  | \"ENE\"\n  | \"E\"\n  | \"ESE\"\n  | \"SE\"\n  | \"SSE\"\n  | \"SSW\"\n  | \"SW\"\n  | \"WSW\"\n  | \"WNW\"\n  | \"NW\"\n  | \"NNW\"\n  | \"N\";\n\nconst DIRECTION_ARROWS: Record<Direction, string> = {\n  N: \"⬆️\",\n  NNE: \"↗️\",\n  NE: \"↗️\",\n  ENE: \"↗️\",\n  E: \"➡️\",\n  ESE: \"↘️\",\n  SE: \"↘️\",\n  SSE: \"↘️\",\n  S: \"⬇️\",\n  SSW: \"↙️\",\n  SW: \"↙️\",\n  WSW: \"↙️\",\n  W: \"⬅️\",\n  WNW: \"↖️\",\n  NW: \"↖️\",\n  NNW: \"↖️\",\n};\n\nexport function getDirectionEmoji(guess: Guess) {\n  return guess.distance === 0 ? \"🎉\" : DIRECTION_ARROWS[guess.direction];\n}\n\nexport function computeProximityPercent(distance: number): number {\n  const proximity = Math.max(MAX_DISTANCE_ON_EARTH - distance, 0);\n  let percent = Math.round((proximity / MAX_DISTANCE_ON_EARTH) * 100);\n  percent = (percent>99 && distance!=0) ? 99 : percent;\n  return percent;\n}\n\nexport function generateSquareCharacters(\n  proximity: number,\n  theme: \"light\" | \"dark\"\n): string[] {\n  const characters = new Array<string>(5);\n  const greenSquareCount = Math.floor(proximity / 20);\n  const yellowSquareCount = proximity - greenSquareCount * 20 >= 10 ? 1 : 0;\n\n  characters.fill(\"🟩\", 0, greenSquareCount);\n  characters.fill(\"🟨\", greenSquareCount, greenSquareCount + yellowSquareCount);\n  characters.fill(\n    theme === \"light\" ? \"⬜\" : \"⬛\",\n    greenSquareCount + yellowSquareCount\n  );\n\n  return characters;\n}\n\nexport function formatDistance(\n  distanceInMeters: number,\n  distanceUnit: \"km\" | \"miles\"\n) {\n  const distanceInKm = distanceInMeters/1000;\n\n  // const dist =\n\n  return distanceInMeters > 10000\n    ? `${Math.round(distanceInKm)}km`\n    : `${Math.round(distanceInMeters)}m`;\n}\n","/home/mb4718/Desktop/sgamble/src/domain/stats.ts",[],"/home/mb4718/Desktop/sgamble/src/domain/locs.ts",[],"/home/mb4718/Desktop/sgamble/src/domain/guess.ts",[],"/home/mb4718/Desktop/sgamble/src/components/GuessRow.tsx",[],"/home/mb4718/Desktop/sgamble/src/components/panels/Card.tsx",["131","132","133"],"import { Guesses } from \"../Guesses\";\nimport { Panel } from \"./Panel\";\nimport React from \"react\";\nimport { Worldle } from \"../Worldle\";\nimport { formatDistance } from \"../../domain/geography\";\n\ninterface CardProps {\n  isOpen: boolean;\n  close: () => void;\n}\n\nexport function Card({ isOpen, close }: CardProps) {\n  return (\n    <Panel title=\"💕 Happy Anniversary! 💕\" isOpen={isOpen} close={close}>\n      <div className=\"space-y-3 text-justify border-b-2 border-gray-200 pb-3 mb-3\">\n        <div>\n          Dear Iz,\n        </div>\n        <div><h2 style={{textAlign: \"center\"}}>Happy Anniversary!! </h2></div>\n        <div>\n         Thank you so much for the most wonderful time over the last four years.\n         I feel so lucky to have met you, and every day has been such a dream.\n         </div>\n         <div>\n         From the top of Mount Vesuvius to late night nugs at Charlie's Fish Bar, I hope this little game reminds you of some of the amazing times we have had over the years.\n        </div>\n        <div>\n        I can't wait to make so many more memories over the years until this game becomes impossible to win!\n        </div>\n        <div>\n        All my love,\n        </div>\n        <div>\n        Matt x x x\n        </div>\n      </div>\n    </Panel>\n  );\n}\n",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"134","replacedBy":"138"},{"ruleId":"136","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":11,"column":10,"nodeType":"142","messageId":"143","endLine":11,"endColumn":17},{"ruleId":"140","severity":1,"message":"144","line":17,"column":11,"nodeType":"142","messageId":"143","endLine":17,"endColumn":12},{"ruleId":"140","severity":1,"message":"145","line":41,"column":19,"nodeType":"142","messageId":"143","endLine":41,"endColumn":30},{"ruleId":"140","severity":1,"message":"146","line":41,"column":32,"nodeType":"142","messageId":"143","endLine":41,"endColumn":42},{"ruleId":"147","severity":1,"message":"148","line":125,"column":9,"nodeType":"149","endLine":137,"endColumn":11},{"ruleId":"150","severity":1,"message":"151","line":164,"column":13,"nodeType":"149","endLine":168,"endColumn":14},{"ruleId":"140","severity":1,"message":"144","line":29,"column":11,"nodeType":"142","messageId":"143","endLine":29,"endColumn":12},{"ruleId":"152","severity":1,"message":"153","line":110,"column":9,"nodeType":"149","messageId":"154","endLine":115,"endColumn":10,"fix":"155"},{"ruleId":"156","severity":1,"message":"157","line":49,"column":36,"nodeType":"158","messageId":"159","endLine":49,"endColumn":38},{"ruleId":"140","severity":1,"message":"160","line":1,"column":10,"nodeType":"142","messageId":"143","endLine":1,"endColumn":17},{"ruleId":"140","severity":1,"message":"141","line":4,"column":10,"nodeType":"142","messageId":"143","endLine":4,"endColumn":17},{"ruleId":"140","severity":1,"message":"161","line":5,"column":10,"nodeType":"142","messageId":"143","endLine":5,"endColumn":24},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],["162"],["163"],"@typescript-eslint/no-unused-vars","'Worldle' is defined but never used.","Identifier","unusedVar","'t' is assigned a value but never used.","'randomAngle' is assigned a value but never used.","'imageScale' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"164","text":"165"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Guesses' is defined but never used.","'formatDistance' is defined but never used.","no-global-assign","no-unsafe-negation",[4677,4687],"\"noopener noreferrer\""]